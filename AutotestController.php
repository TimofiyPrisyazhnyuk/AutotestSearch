<?phpnamespace app\commands;use yii\console\Controller;/** * Class AutotestController * * @author Prisyazhnyuk Timofiy * @package app\commands */class AutotestController extends Controller{    const GET_REQUEST_BODY_URI = '/search?keyword=';    const REQUEST_URI = '/search/rest/requestUri';    const DELIMITER_CASE = ' ************* ';    const COLOR = [        'green' => "\033[" . "42" . "m",        'yellow' => "\033[" . "43" . "m",        'red' => "\033[" . "41" . "m",        'cyan' => "\033[" . "46" . "m",        'magenta' => "\033[" . "45" . "m",    ];    const LOW_UPPER_CASE_SYMBOLS = 'LowUpperCaseSymbols';    const BRAND_NAME = 'BrandName';    const CATEGORY_NAME = 'CategoryName';    const MATCH_MPN = 'MatchMpn';    const MATCH_PARTY_MPN = 'MatchPartyMpn';    const MATH_EAN = 'MathEan';    const BRAND_NAME_WITH_CATEGORY = 'BrandNameWithCategory';    const BRAND_NAME_WITH_MPN = 'BrandNameWithMpn';    const TITLE_MATH = 'TitleMath';    const FAMILY_MATH = 'FamilyMath';    const FAMILY_BRAND_NAME_MATH = 'FamilyBrandNameMath';    const SERIES_MATH = 'SeriesMath';    const FAMILY_SERIES_MATH = 'FamilySeriesMath';    const WORD_IN_SHORT_SUMMARY_DESCRIPTION = 'WordInShortSummaryDescription';    const WORD_IN_LONG_SUMMARY_DESCRIPTION = 'WordInLongSummaryDescription';    const BRAND_NAME_CATEGORY_TITLE = 'BrandNameCategoryTitle';    const INCORRECT_SEARCH = 'IncorrectSearch';    const FUZZY_SEARCH = 'FuzzySearch';    const SHORT_DESCRIPTION = 'ShortDescription';    /**     *  TEST CASES FOR SEARCH.     *     * 1) THIS ARRAY CONTAIN (NAME FOR SEARCH CASE => VALUE FOR ARRAY TEST VALUE).     * 2) VALUE NEED WRITE IN TEST VALUES ARRAY BY SEARCH LANGUAGE.     */    const TEST_CASES = [        "Search query is case independent (low/upper-case symbols)" => self::LOW_UPPER_CASE_SYMBOLS,        "Brand name search" => self::BRAND_NAME,        "Category name search" => self::CATEGORY_NAME,        "MPN search - full match" => self::MATCH_MPN,        "MPN search - partly match" => self::MATCH_PARTY_MPN,        "EAN search" => self::MATH_EAN,        "Brand name + Category" => self::BRAND_NAME_WITH_CATEGORY,        "Brand name + MPN" => self::BRAND_NAME_WITH_MPN,        "Title search" => self::TITLE_MATH,        "Family search" => self::FAMILY_MATH,        "Brand name + Family" => self::FAMILY_BRAND_NAME_MATH,        "Series search" => self::SERIES_MATH,        "Family + Series search" => self::FAMILY_SERIES_MATH,        "Word/word combination, which can be matched only with index Summary description of searched products" => self::WORD_IN_SHORT_SUMMARY_DESCRIPTION,        "Brand name and/or Category name and/or EAN and/or MPN and/or word/word combination from Summary description" => self::WORD_IN_LONG_SUMMARY_DESCRIPTION,        "Brand name and/or Category name + random word/word combination before/after" => self::BRAND_NAME_CATEGORY_TITLE,        "Incorrect search - will return empty result" => self::INCORRECT_SEARCH,        "Fuzzy search" => self::FUZZY_SEARCH,        'Short description' => self::SHORT_DESCRIPTION,    ];    /**     *  TEST VALUES WITH SEARCH CASE AND EXPECTED RESULT IN JSON.     *     *  DATA CONTAIN BY LANGUAGE (EN, ...)     *  ALL CASES CONTAIN BY SEARCH CASE NAME AND VALUES WAS HAVE STRUCTURE BY TYPE CHECK RESULT.     *  EXIST NEXT TYPES CHECK RESULT (resultHits, hits, doubleHits, emptyResult)     */    const TEST_VALUES = [        'en' => [            /**             *  RESULT HITS TYPE.             *             *  CASE - ARRAY VALUES WITH TEST SEARCH VALUES.             *  EXPECTED - ARRAY WITH TYPE CHECK SEARCH RESULT (resultHits)             *  AND ARRAY WITH EXPECTED SPECIFIC FIELDS AND VALUE IN JSON.             */            self::LOW_UPPER_CASE_SYMBOLS => [                'case' => ['1ZP59EA', '1zp59ea'],                'expected' => ['resultHits' => ['product_id' => 37608961]],            ],            /**             *  HITS TYPE.             *             *  CASE - ARRAY VALUES WITH TEST SEARCH VALUES.             *  EXPECTED - ARRAY WITH TYPE CHECK SEARCH RESULT (hits)             *  AND VALUE WHERE DO CHECK IN THIS FIELD IN JSON BY SEARCH CASE.             */            self::BRAND_NAME => [                'case' => ['Philips', 'HP', 'Tripp Lite', 'apple'],                'expected' => ['hits' => 'manufacturer_name'],            ],            self::CATEGORY_NAME => [                'case' => ['Notebooks', 'Food, Beverages & Tobacco', 'Hybrids'],                'expected' => ['hits' => 'category_name'],            ],            self::MATCH_MPN => [                'case' => ['RBC49-DV', 'sm-g960fzdd', 'b119-4x1-mv', 'rmkit18-32', 'B119-000-REC', '9h.l6xla.dbe', '80-191423', 'mg5735/15', 'A6VM-Q005H', 'b9c85av#abh',                    'bx80684i78700ksr3qr', 'fusion remote max', 'KG 521.M', 'NOTEBOOK COOLER', '04061 101 402', '82684-21675 35-36'],                'expected' => ['hits' => 'mpn'],            ],            self::MATCH_PARTY_MPN => [                'case' => ['RBC49-D', 'sm-g960fzd', 'b119-4x1-m', 'rmkit18-3', 'B119-000-RE', '9h.l6xla.db', '80-19142', 'mg5735/1', 'A6VM-Q005', 'b9c85av#ab'],                'expected' => ['hits' => 'mpn'],            ],            self::MATH_EAN => [                'case' => ['0025184252762', '829160101316', '4713233207042', '4058154249338', '4242003827260', '00735858221023'],                'expected' => ['hits' => 'ean'],            ],            self::TITLE_MATH => [                'case' => ['Iphone', 'rog', 'workstation', 'mobile workstation', 'iphone x', 'iphone xs'],                'expected' => ['hits' => 'title'],            ],            self::WORD_IN_SHORT_SUMMARY_DESCRIPTION => [                'case' => ['HP Pavilion 500-120a, 3.1 GHz, 4th gen', 'Indesit SAN 400, White', 'intel core i7-8700k, 8th gen'],                'expected' => ['hits' => 'short_summary_description'],            ],            self::WORD_IN_LONG_SUMMARY_DESCRIPTION => [                'case' => ['lenovo thinkpad 11e', 'Lenovo ThinkPad 11e (2nd Gen)'],                'expected' => ['hits' => 'long_summary_description'],            ],            self::SHORT_DESCRIPTION => [                'case' => ['Dulux Trade Weathershield Textured Masonry Paint Pure Brilliant White 5L', 'Drum, 60000 pages, Konica Minolta bizhub 4050/4750'],                'expected' => ['hits' => 'short_description'],            ],            /**             *  DOUBLE HITS TYPE.             *             *  CASE - ARRAY VALUES WITH TEST SEARCH VALUES.             *  EXPECTED - ARRAY WITH TYPE CHECK SEARCH RESULT (doubleHits) AND ARRAYS WHERE:             *  KEY - (SPECIFIC TEST CASE FROM ARRAY 'case').             *  VALUE - ARRAYS WITH DATA IN FORMAT (CHECK FIELD IN JSON => EXPECTED VALUE IN JSON).             */            self::BRAND_NAME_WITH_MPN => [                'case' => ['philips mg5735/15', 'hp 393568-001', 'philips dla40113/10', 'intel blkdh67gdb3', 'electrolux KGS7566SX',                    'phoenix 2903360', 'phoenix relay 2903360', 'acer 91.mlfeb.tnp', 'apple md239lp/a'],                'expected' => [                    'doubleHits' => [                        'philips mg5735/15' => ['manufacturer_name' => 'Philips', 'mpn' => 'mg5735/15'],                        'hp 393568-001' => ['manufacturer_name' => 'Hp', 'mpn' => '393568-001'],                        'philips dla40113/10' => ['manufacturer_name' => 'Philips', 'mpn' => 'dla40113/10'],                        'intel blkdh67gdb3' => ['manufacturer_name' => 'Intel', 'mpn' => 'blkdh67gdb3'],                        'electrolux KGS7566SX' => ['manufacturer_name' => 'Electrolux', 'mpn' => 'KGS7566SX'],                        'phoenix 2903360' => ['manufacturer_name' => 'Phoenix', 'mpn' => '2903360'],                        'phoenix relay 2903360' => ['manufacturer_name' => 'Phoenix', 'mpn' => '2903360'],                        'acer 91.mlfeb.tnp' => ['manufacturer_name' => 'Acer', 'mpn' => '91.mlfeb.tnp'],                        'apple md239lp/a' => ['manufacturer_name' => 'Apple', 'mpn' => 'md239lp/a'],                    ],                ],            ],            self::BRAND_NAME_WITH_CATEGORY => [                'case' => ['acer notebook', 'asus notebook'],                'expected' => [                    'doubleHits' => [                        'acer notebook' => ['manufacturer_name' => 'Acer', 'category_name' => 'Notebooks'],                        'asus notebook' => ['manufacturer_name' => 'Asus', 'category_name' => 'Notebooks'],                    ],                ],            ],            self::BRAND_NAME_CATEGORY_TITLE => [                'case' => ['hp notebooks gh', 'asus notebook black', 'philips notebook sle'],                'expected' => [                    'doubleHits' => [                        'hp notebooks gh' => ['manufacturer_name' => 'Hp', 'category_name' => 'Notebooks', 'title' => 'gh'],                        'asus notebook black' => ['manufacturer_name' => 'Asus', 'category_name' => 'Notebooks', 'title' => 'black'],                        'philips notebook sle' => ['manufacturer_name' => 'Philips', 'category_name' => 'Notebooks', 'title' => 'sle'],                    ],                ],            ],            self::FUZZY_SEARCH => [                'case' => ['PlaiStation', 'makbook', 'elektroluks'],                'expected' => [                    'doubleHits' => [                        'PlaiStation' => ['title' => 'playstation'],                        'makbook' => ['title' => 'macbook'],                        'elektroluks' => ['title' => 'electrolux'],                    ],                ],            ],            self::FAMILY_BRAND_NAME_MATH => [                'case' => ['acer aspire', 'hp pavilion', 'apple iphone'],                'expected' => [                    'doubleHits' => [                        'acer aspire' => ['family_id' => '60850', 'manufacturer_name' => 'Acer'],                        'hp pavilion' => ['family_id' => '63510', 'manufacturer_name' => 'HP'],                        'apple iphone' => ['family_id' => '63800', 'manufacturer_name' => 'Apple'],                    ],                ],            ],            self::FAMILY_MATH => [                'case' => ['SensoTouch 2D', 'EcoClassic Globe lamp', 'iPhone'],                'expected' => [                    'doubleHits' => [                        'SensoTouch 2D' => ['family_id' => '65053'],                        'EcoClassic Globe lamp' => ['family_id' => '64791'],                        'iPhone' => ['family_id' => '63800'],                    ],                ],            ],            self::SERIES_MATH => [                'case' => ['4000', 'XS', 'SL'],                'expected' => [                    'doubleHits' => [                        '4000' => ['series_id' => '5710'],                        'XS' => ['series_id' => '6447'],                        'SL' => ['series_id' => '586'],                    ],                ],            ],            self::FAMILY_SERIES_MATH => [                'case' => ['iPhone XS', 'ThinkPad SL', 'ProBook 4000'],                'expected' => [                    'doubleHits' => [                        'iPhone XS' => ['series_id' => '6447', 'family_id' => '63800'],                        'ThinkPad SL' => ['series_id' => '586', 'family_id' => '357'],                        'ProBook 4000' => ['series_id' => '5710', 'family_id' => '63498'],                    ],                ],            ],            /**             *  EMPTY SEARCH RESULT TYPE.             *             *  CASE - ARRAY VALUES WITH TEST SEARCH VALUES.             *  EXPECTED - ARRAY WITH TYPE CHECK SEARCH RESULT (emptyResult) AND VALUE - TRUE.             */            self::INCORRECT_SEARCH => [                'case' => ['****', '///////////'],                'expected' => ['emptyResult' => true],            ],        ],    ];    /**     * Run check search requests for search.     *     * @param string $host     *     * @throws \Exception     */    public function actionRun($domain = 'https://testSearch', $language = 'en')    {        try {            foreach (self::TEST_CASES as $name => $value) {                $compareResult = false;                foreach (self::TEST_VALUES[$language][$value]['case'] as $case) {                    $getQueryBody = $this->getQueryBodyParams($domain, $language, $case);                    $requestBody = $this->getSearchResult($case, $getQueryBody);                    $result = $this->requestToSearchPost($domain, $language, $requestBody);                    if (!$result) {                        throw new \Exception('Failed connect to current host!');                    }                    $decodeValue = $this->decodeValue($result);                    $compareResult[$case] = $this->compareResults($decodeValue, $case, self::TEST_VALUES[$language][$value]['expected']);                }                if ($compareResult) {                    $this->generateConsoleResult($compareResult, $name);                }            }            $message = self::COLOR['magenta'] . self::DELIMITER_CASE . 'TEST SEARCH SUCCESSFULLY DONE' . self::DELIMITER_CASE . "\033[0m" . "\n";            $this->showConsoleString($message);        } catch (\Exception $e) {            print_r('Invalid cases or case_values by language or structure - ' . $e->getMessage());        }    }    /**     * Generate result string and show it in console.     *     * @param array $result     * @param string $name     */    public function generateConsoleResult(array $result, $name)    {        if (!empty($result)) {            $caseName = self::COLOR['cyan'] . self::DELIMITER_CASE . strtoupper($name) . self::DELIMITER_CASE . "\033[0m" . "\n";            $this->showConsoleString($caseName);            $iterateCases = 1;            foreach ($result as $case => $value) {                $message = self::COLOR[$value['color']] . $iterateCases . ") SEARCH_CASE_VALUE: " . $case . " | HIT: " . $value['hit'] . "\033[0m" . "\n";                $this->showConsoleString($message);                $iterateCases++;            }        }    }    /**     * Compare results by cases.     *     * @param array $data     * @param array|string $expected     *     * @return array|bool     * @throws \Exception     */    public function compareResults(array $data, $case, $expected)    {        $expectedKey = key($expected);        if (!empty($data['products']) && isset($expected[$expectedKey])) {            switch ($expectedKey) {                case 'hits' :                    return $this->compareByHits($data['products'], $case, $expected[$expectedKey]);                case 'resultHits' :                    return $this->compareByResultHits($data['products'], $expected[$expectedKey]);                case 'doubleHits' :                    return $this->compareByDoubleHits($data['products'], $case, $expected[$expectedKey]);            }        } elseif ($expectedKey === 'emptyResult') {            $color = $this->getStatisticColorValue(1);            return $this->resultStatistic(1, $color);        }    }    /**     * Compare search result by hits string.     *     * @param array $data     * @param string $expected     *     * @return array|bool     */    public function compareByHits(array $data, $case, $expected)    {        foreach ($data as $key => $value) {            if (isset($value[$expected]) && stripos($value[$expected], $case) !== false) {                $resultHit = $key + 1;                $color = $this->getStatisticColorValue($resultHit);                return $this->resultStatistic($resultHit, $color);            }        }        return $this->resultStatistic();    }    /**     * Default compare search result.     *     * @param array $data     * @param array $expected     *     * @return array     */    public function compareByResultHits($data, array $expected)    {        $keyExpected = key($expected);        foreach ($data as $key => $value) {            if (isset($value[$keyExpected]) && $value[$keyExpected] == $expected[$keyExpected]) {                $resultHit = $key + 1;                $color = $this->getStatisticColorValue($resultHit);                return $this->resultStatistic($resultHit, $color);            }        }        return $this->resultStatistic();    }    /**     * Default compare search result.     *     * @param array $data     * @param array $expected     *     * @return array     * @throws \Exception     */    public function compareByDoubleHits($data, $case, array $expected)    {        if (!isset($expected[$case]) && is_array($expected[$case])) {            throw new \Exception('Invalid data provided in arrays - test cases.');        }        foreach ($data as $key => $value) {            $checkedData = false;            $searchKeys = array_keys($expected[$case]);            foreach ($searchKeys as $searchKey) {                if (!isset($checkedData[$searchKey]) && isset($value[$searchKey])                    && stripos($value[$searchKey], $expected[$case][$searchKey]) !== false) {                    $checkedData[$searchKey] = $key + 1;                }            }            if ($checkedData && array_keys($checkedData) === $searchKeys                && count(array_unique(array_values($checkedData))) === 1) {                $resultHit = array_shift($checkedData);                $color = $this->getStatisticColorValue($resultHit);                return $this->resultStatistic($resultHit, $color);            }        }        return $this->resultStatistic();    }    /**     * Get string result statistic value.     *     * @param integer $hit     *     * @return string     */    public function getStatisticColorValue($hit)    {        if ($hit === 1) {            return "green";        }        if ($hit > 1 && $hit <= 5) {            return "yellow";        }        return "red";    }    /**     * Return result statistic.     *     * @param int $resultHit     * @param string $color     *     * @return array     */    public function resultStatistic($resultHit = 0, $color = 'red')    {        return [            'hit' => $resultHit,            'color' => $color,        ];    }    /**     * GET method - return json body params by search string.     *     * @param string $host     * @param string $case     *     * @return mixed     */    public function getQueryBodyParams($domain, $language, $case)    {        $url = $domain . '/' . $language . self::GET_REQUEST_BODY_URI . urlencode($case) . '&getJson=true';        $connection = curl_init($url);        curl_setopt($connection, CURLOPT_RETURNTRANSFER, true);        $result = curl_exec($connection);        curl_close($connection);        return $result;    }    /**     * Request to search by request string.     *     * @param string $postData     *     * @return bool|string     * @throws \Exception     */    public function getSearchResult($searchString, $requestBodyParams)    {        $params = $this->decodeValue($requestBodyParams);        if ($params['categoryId'] === false) {            unset($params['categoryId']);        }        if ($params['manufId'] === false) {            unset($params['manufId']);        }        // Result search query.        $payload = json_encode([            "searchString" => $searchString,            "sort" => ['', ''],            "params" => $params,            "facetParams" => [],            "p" => 0,            "codes" => ["ean" => [], "mpn" => [], "mpn_sup" => []],        ]);        return $payload;    }    /**     * Query to search POST.     *     * @param string $host     * @param string $payload     *     * @return mixed     */    public function requestToSearchPost($domain, $language, $payload)    {        $connection = curl_init($domain . '/' . $language . self::REQUEST_URI);        curl_setopt($connection, CURLOPT_POSTFIELDS, $payload);        curl_setopt($connection, CURLOPT_HTTPHEADER, ['Content-Type:application/json']);        curl_setopt($connection, CURLOPT_RETURNTRANSFER, true);        $result = curl_exec($connection);        curl_close($connection);        return $result;    }    /**     * Decode json value.     *     * @param string $data     *     * @return mixed     * @throws \Exception     */    public function decodeValue($data)    {        $result = json_decode($data, true);        if (!$result) {            throw new \Exception('Invalid search json response, for example run: "php yii testCommand"!');        }        return $result;    }    /**     * Show string message in console.     *     * @param string $message     */    public function showConsoleString($message)    {        if (!empty($message)) {            echo $message;        }    }}